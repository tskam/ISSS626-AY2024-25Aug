{
  "hash": "e961d548b4bcb01d755ad64632646fe0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 4: Geographically Weighted Summary Statistics - gwModel methods\"\nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems(Practice)\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2024-09-28\"\nformat: \n  revealjs:\n    pdf: default\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\ndate-format: \"DD MMM YYYY\"\neditor: visual \n---\n\n\n\n## Loading the package\n\nIn this in-class exercise, sf, spdep, tmap, tidyverse, knitr and GWmodel will be used.\n\n:::: panel-tabset\n### DIY\n\nUsing the step you leanred from previous hands-in, install and load the necessary R packages in R environment.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\n:::\n::::\n\n## Preparing the Data\n\nFor this in-class exercise, Hunan shapefile and Hunan_2012 data file will be used.\n\n:::::: panel-tabset\n### DIY\n\nUsing the steps you learned from previous hands-on, complete the following tasks:\n\n-   import Hunan shapefile and parse it into a sf polygon feature object.\n-   import Hunan_2012.csv file parse it into a tibble data.frame.\n-   join Hunan and Hunan_2012 data.frames.\n\n### Importing Hunan shapefile\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `D:\\tskam\\ISSS626-AY2024-25Aug\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n:::\n\n### Importing Hunan_2012 table\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n:::\n\n### Joining Hunan and Hunan_2012\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf, hunan2012) %>%\n  select(1:3, 7, 15, 16, 31, 32)\n```\n:::\n\n\n:::\n::::::\n\n## Mapping GDPPC\n\n::::: panel-tabset\n### DIY\n\nUsing the steps you learned from Hands-on Exercise 5, prepare a choropleth map showing the geographic distribution of GDPPC of Hunan Province.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-revealjs/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n\n\n### The code\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(hunan_sf) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan_sf, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n:::\n\n\n:::\n:::::\n\n## Converting to SpatialPolygonDataFrame\n\n::: callout-note\nGWmodel presently is built around the older sp and not sf formats for handling spatial data in R.\n:::\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n\n:::\n\n## Geographically Weighted Summary Statistics with adaptive bandwidth\n\n### Determine adaptive bandwidth\n\n::::: panel-tabset\n### Cross-validation\n\n::: {style=\"font-size: 1.20em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach = \"CV\",\n             adaptive = TRUE, \n             kernel = \"bisquare\", \n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n:::\n\n### AIC\n\n::: {style=\"font-size: 1.20em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach =\"AIC\",\n             adaptive = TRUE, \n             kernel = \"bisquare\", \n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Geographically Weighted Summary Statistics with adaptive bandwidth\n\n### Computing geographically wieghted summary statistics\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n\n:::\n\n## Geographically Weighted Summary Statistics with adaptive bandwidth\n\n### Preparing the output data\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\n:::\n\nNext, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n:::\n\n## Visualising geographically weighted summary statistics\n\n:::::: panel-tabset\n### The Geographically Weighted Mean\n\n:::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n:::\n::::\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n```\n:::\n\n\n:::\n::::::\n\n## Geographically Weighted Summary Statistics with fixed\n\n### Determine fixed bandwidth\n\n::::: panel-tabset\n### Cross-validation\n\n::: {style=\"font-size: 1.20em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach = \"CV\",\n             adaptive = FALSE, \n             kernel = \"bisquare\", \n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n:::\n\n### AIC\n\n::: {style=\"font-size: 1.20em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n             data = hunan_sp,\n             approach =\"AIC\",\n             adaptive = FALSE, \n             kernel = \"bisquare\", \n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Geographically Weighted Summary Statistics with fixed\n\n### Computing adaptive bandwidth\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = FALSE,\n               longlat = T)\n```\n:::\n\n\n:::\n\n## Geographically Weighted Summary Statistics with fixed bandwidth\n\n### Preparing the output data\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\n:::\n\nNext, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n:::\n\n## Geographically Weighted Summary Statistics with fixed\n\n### Visualising geographically weighted summary statistics\n\n:::::: panel-tabset\n### The Geographically Weighted Mean\n\n:::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n:::\n::::\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically wieghted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n```\n:::\n\n\n:::\n::::::\n\n## Geographically Weighted Correlation with Adaptive Bandwidth\n\nBusiness question: Is there any relationship between GDP per capita and Gross Industry Output?\n\n:::: panel-tabset\n### Conventional statistical solution\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = hunan2012, \n  x = Agri, \n  y = GDPPC,\n  xlab = \"Gross Agriculture Output\", ## label for the x-axis\n  ylab = \"GDP per capita\", \n  label.var = County, \n  label.expression = Agri > 10000 & GDPPC > 50000, \n  point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n  xfill = \"#CC79A7\", \n  yfill = \"#009E73\", \n  title = \"Relationship between GDP PC and Gross Agriculture Output\")\n```\n:::\n\n\n:::\n::::\n\n## Geographically Weighted Correlation with Adaptive Bandwidth\n\nGeospatial analytics solution\n\n::::::: panel-tabset\n### Determine the bandwidth\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.gwr(GDPPC ~ GIO, \n             data = hunan_sp, \n             approach = \"AICc\", \n             adaptive = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1870.235 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1870.852 \nAdaptive bandwidth (number of nearest neighbours): 72 AICc value: 1869.744 \nAdaptive bandwidth (number of nearest neighbours): 78 AICc value: 1869.713 \nAdaptive bandwidth (number of nearest neighbours): 82 AICc value: 1869.604 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \nAdaptive bandwidth (number of nearest neighbours): 86 AICc value: 1869.647 \nAdaptive bandwidth (number of nearest neighbours): 83 AICc value: 1869.567 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \n```\n\n\n:::\n:::\n\n\n:::\n\n### Computing gwCorrelation\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstats <- gwss(hunan_sp, \n                vars = c(\"GDPPC\", \"GIO\"), \n                bw = bw,\n                kernel = \"bisquare\",\n                adaptive = TRUE, \n                longlat = T)\n```\n:::\n\n\n:::\n\n### Extracting the result\n\nCode chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstats$SDF) %>%\n  select(c(12,13)) %>%\n  rename(gwCorr = Corr_GDPPC.GIO,\n         gwSpearman = Spearman_rho_GDPPC.GIO)\n```\n:::\n\n\n:::\n\nNext, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_Corr <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n:::\n:::::::\n\n## Visualising Local Correlation\n\n:::: panel-tabset\n### Local Correlation Coefficient\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n\n### Local Spearman Coefficient\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_Corr) +\n  tm_fill(\"gwSpearman\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Spearman Rho\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50, \n            legend.width = 1.50,\n            frame = TRUE)\n```\n:::\n\n\n:::\n::::\n\n## References\n\nBrunsdon, C. et. al. (2002) \"Geographically weighted summary statistics - a framework for localised exploratory data analysis\", *Computer, Environment and Urban Systems*, Vol 26, pp. 501-525. Available as e-journal, SMU library.\n\nHarris, P. & Brunsdon, C. (2010) \"Exploring spatial variation and spatial relationships in freshwater acidification critical load data set for Great Britain using geographically weighted summary statistics\", *Computers & Geosciences*, Vol. 36, pp. 54-70. Available as e-journal, SMU library.\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}