{
  "hash": "a4df67f0c81853c63c6d39c2eb1daad3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 9: Geography of Accessibility\"\nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems(Practice)\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2024-10-28\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\ndate-format: \"DD MMM YYYY\"\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Getting Started\n\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(SpatialAcc, sf, tidyverse, \n               tmap, ggstatsplot)\n```\n:::\n\n\n:::\n\n## Importing Data\n\n::: panel-tabset\n### Geospatail data\n\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_NO_SEA_PL\") %>%\n  st_transform(crs = 3414)\n\nhexagons <- st_read(dsn = \"data/geospatial\",\n                   layer = \"hexagons\") %>%\n  st_transform(crs = 3414)\n\neldercare <- st_read(dsn = \"data/geospatial\",\n                     layer = \"ELDERCARE\") %>%\n  st_transform(csr = 3414)\n```\n:::\n\n\n:::\n\n### OD Matrix\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", \n                     skip = 0)\n```\n:::\n\n\n:::\n:::\n\n\n## Data cleaning and Updating Attributes\n\n::: panel-tabset\n\n### Supply\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n```\n:::\n\n\n:::\n\n### Demand\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- hexagons %>%\n  select(fid) %>%\n  mutate(demand = 100)\n```\n:::\n\n\n:::\n\n### OD Matrix\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat_km <- as.matrix(distmat/1000)\n```\n:::\n\n\n:::\n:::\n\n## Computing Handsen's Accessibility\n\n::: panel-tabset\n### The base code\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n```\n:::\n\n\n:::\n\n### Tidy the output\n\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acc_Hansen) <- \"accHansen\"\n\nacc_Hansen <- as_tibble(acc_Hansen)\n\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n\n:::\n\n### Combine code chunk\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 0.5, \n                            family = \"Hansen\"))\n\ncolnames(acc_Hansen) <- \"accHansen\"\nacc_Hansen <- as_tibble(acc_Hansen)\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n\n:::\n:::\n\n--- \n\n### Visualising Accessibility\n\n::: panel-tabset\n\n#### The code\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapex <- st_bbox(hexagons)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n:::\n\n\n:::\n\n#### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-revealjs/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n\n\n:::\n\n---\n\n### Statistical graphic\n\n::: panel-tabset\n\n### The code\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n```\n:::\n\n\n:::\n\n::: {style=\"font-size: 1.5em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggbetweenstats(\n  data = hexagon_Hansen,\n  x = REGION_N,\n  y = accHansen,\n  type = \"p\")\n```\n:::\n\n\n:::\n\n### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-revealjs/unnamed-chunk-15-1.png){width=1152}\n:::\n:::\n\n\n:::\n",
    "supporting": [
      "In-class_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}